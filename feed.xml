<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">



<title type="text">PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http:/DSP2019F/feed.xml" />
<link rel="alternate" type="text/html" href="http:/DSP2019F/" />
<updated>2019-11-21T00:22:51-06:00</updated>
<id>http:/DSP2019F/</id>
<author>
  <name>Amir Shahmoradi</name>
  <uri>http:/DSP2019F/</uri>
  <email>shahmoradi@utexas.edu</email>
</author>


<entry>
  <title type="html"><![CDATA[Homework 3: Clustering techniques]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/homework/4-clustering"/>
  <id>http:/DSP2019F/homework/4-clustering</id>
  <published>2019-11-21T00:00:00-06:00</published>
  <updated>2019-11-21T00:00:00-06:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Thursday Nov 21, 2019 2:00 PM&lt;/strong&gt;. This homework aims at giving you some basic experience with the some of the most popular clustering techniques.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/clustering-kmeans/clustering-kmeans&quot; target=&quot;_blank&quot;&gt;Kmeans Clustering&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/homework/4-clustering&quot;&gt;Homework 3: Clustering techniques&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on November 21, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Final exam: semester project]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/exam/1-semester-project"/>
  <id>http:/DSP2019F/exam/1-semester-project</id>
  <published>2019-11-01T00:00:00-05:00</published>
  <updated>2019-11-01T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This is page describes the final semester project that will serve as the final exam for this course. Please submit all your efforts for this project (all files, data, and results) in &lt;code&gt;DSP2019F/exams/final/&lt;/code&gt; directory in your private repository for this course. Don’t forget to push your answers to your remote Github repository by &lt;strong&gt;2 PM, Thursday, Dec 5, 2019&lt;/strong&gt;.  &lt;strong&gt;Note: I strongly urge you to attend the future lectures until the end of the semester and seek help from the instructor (Amir) to tackle this project.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Inside the directory for the project (&lt;code&gt;DSP2019F/exams/final/&lt;/code&gt;) create three other folders: &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;results&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; folder contains the &lt;a href=&quot;http:/DSP2019F/exam/1-problem/cells.mat&quot; target=&quot;_blank&quot;&gt;input data&lt;/a&gt; for this project. The &lt;code&gt;src&lt;/code&gt; folder should contain all the codes that you write for this project, and the &lt;code&gt;results&lt;/code&gt; folder should contain all the results generated by your code.&lt;/p&gt;

&lt;p&gt;For your final project, you can pick one of the following two projects:&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;nonlinear-regression&quot;&gt;Nonlinear Regression&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-reduction-and-visualization&quot;&gt;Data reduction and visualization&lt;/h3&gt;

&lt;p&gt;Our goal in this project is to fit a mathematical model of the growth of living cells to real experimental data for the growth of a cancer tumor in the brain of a rat. You can download the data in the form of a MATLAB data file for this project from &lt;a href=&quot;http:/DSP2019F/exam/1-problem/cells.mat&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Write a set of separate Python codes that perform the following tasks one after the other, and output all the results to the &lt;code&gt;results&lt;/code&gt; folder described above. Since you have multiple Python codes each in a separate file for different purposes, you should also write a &lt;code&gt;main&lt;/code&gt; Python code, such that when the user of your codes runs on the Bash command line,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;main.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;then all the necessary Python codes to generate all the results will be called by this &lt;code&gt;main&lt;/code&gt; script.&lt;/p&gt;

&lt;p&gt;Initially at time $t=0 ~\mathrm{[days]}$, $100,000\pm10,000$ brain tumor cells are injected to the brain of the rat. These cells are then allowed to grow for 10 days. Then starting at day 10, the brain of the rat is imaged using an &lt;a href=&quot;https://en.wikipedia.org/wiki/Magnetic_resonance_imaging&quot; target=&quot;_blank&quot;&gt;MRI machine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each image results in a 4-dimensional double-precision MATLAB matrix &lt;code&gt;cells(:,:,:,:)&lt;/code&gt;, corresponding to dimensions &lt;code&gt;cells(y,x,z,time)&lt;/code&gt;. This data is collected from MRI imaging of the rat’s brain almost every other day for two weeks. For example, &lt;code&gt;cells(:,:,:,1)&lt;/code&gt; contains the number of cells at each point in space (y,x,z) at the first time point, or, &lt;code&gt;cells(:,:,10,1)&lt;/code&gt; represents a (XY) slice of MRI at $z=1$ and $t=1 [days]$.&lt;/p&gt;

&lt;p&gt;Therefore, the vector of times at which we have the number of tumor cells measured would be,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;Time = [ 0, 10, 12, 14, 16, 18, 20, 22 ] ~,&lt;/script&gt;

&lt;p&gt;in units of days. Given this data set,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;/strong&gt; First write a Python script that reads the input MATLAB binary file containing cell numbers at different positions in the rat’s brain measured by MRI, on different days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2. &lt;/strong&gt; Write Python codes that generate a set of figures as similar as possible to the following figures (specific color-codes of the curves and figures do not matter, focus more on the format of the plots and its parts).&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_1_t10.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_2_t12.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_3_t14.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_5_t16.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_6_t18.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/tvccZSliceSubplotWithXYlab_rad_00gy_7_t20.0.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;obtaining-the-error-in-tumor-cell-count&quot;&gt;Obtaining the error in tumor cell count&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;3. &lt;/strong&gt; Our assumption here is that the uncertainty in the total number of tumor cells at each time point is given by the number of tumor cells at the boundary of the tumor. Therefore, you will have to write a Python code that identifies the boundary of the tumor at each time point and then sums over the count cells in all boundary points and uses that as the error in the number of tumor cell counts. For this part, you will need Python functions such as &lt;code&gt;bwboundaries()&lt;/code&gt; and &lt;code&gt;errorbar()&lt;/code&gt;. In the end, you should get and save a figure in your project’s figure folder like the following figure,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/growthCurve.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Note that this part of the project is completely independent of the modeling part described in the following section.&lt;/p&gt;

&lt;h3 id=&quot;the-mathematical-model-of-tumor-growth&quot;&gt;The mathematical model of tumor growth&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;4. &lt;/strong&gt; Now our goal is to fit the time evolution of the growth of this tumor, using a mathematical model. To do so, we need to find the best-fit parameters of the model. The mathematical model we will use here is called the &lt;a href=&quot;https://en.wikipedia.org/wiki/Gompertz_function&quot; target=&quot;_blank&quot;&gt;Gompertzian growth model&lt;/a&gt;. Here, we will use a slightly modified form of the Gompertzian function of the following form,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;N(t,\lambda,c) = N_0 \times \exp\bigg( \lambda~\bigg[ 1-\exp(-ct) \bigg] \bigg) ~,&lt;/script&gt;

&lt;p&gt;where $N(t,\lambda,c)$ is the &lt;strong&gt;predicted number&lt;/strong&gt; of tumor cells at time $t$, $N_0$ is the initial number of tumor cells at time $t=0$ days, $\lambda$ is the growth rate parameter of the model, and $c$ is just another parameter of the model. We already know the initial value of the number of tumor cells, $N_0=100,000\pm10,000$. Therefore, we can fix $N_0$ to $100,000$ in the equation of the model given above.&lt;/p&gt;

&lt;p&gt;However, we don’t know the values of the parameters $\lambda$ and $c$. Thus, we would like to find their best values given the input tumor cell data using some Python optimization algorithm.&lt;/p&gt;

&lt;p&gt;This Gompertzian growth model is called our &lt;strong&gt;physical model&lt;/strong&gt; for this problem, because it describes the physics of our problem (The physics/biology of the tumor growth).&lt;/p&gt;

&lt;h4 id=&quot;combining-the-physical-model-with-a-regression-model&quot;&gt;Combining the physical model with a regression model&lt;/h4&gt;

&lt;p&gt;Now, if our physical model was ideally perfect in describing the data, the curve of the model prediction would pass through all the points in the growth curve plot of the above figure, thus providing a perfect description of data. This is, however, never the case, as it is famously said &lt;strong&gt;all models are wrong, but some are useful&lt;/strong&gt;. In other words, the model prediction never matches observation perfectly.&lt;/p&gt;

&lt;p&gt;Therefore, we have to seek for the parameter values that can bring the model prediction us as close as possible to data. To do so, we define a &lt;strong&gt;statistical model&lt;/strong&gt; in addition to the &lt;strong&gt;physical model&lt;/strong&gt; described above. In other words, we have to define a statistical regression model (the renowned &lt;strong&gt;least-squares method&lt;/strong&gt;) that gives us the probability $\pi(\log N_{obs}|\log N(t))$ of observing individual data points at each of the given times,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pi(\log N_{obs} | \log N(t,\lambda,c),\sigma) = \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t)-\log N(t,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~,&lt;/script&gt;

&lt;p&gt;Note that our statistical model given above is a Normal probability density function, with its mean parameter represented by &lt;strong&gt;the log&lt;/strong&gt; of the output of our physical model, $\log N(t,\lambda,c)$, and its standard deviation represented by $\sigma$, which is unknown, and we seek to find it. The symbol $\pi$, whenever it appears with parentheses, like $\pi()$, it means the probability of the entity inside the parentheses. However, whenever it appears alone, it means the famous number PI, $\pi\approx 3.1415$.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why do we use the logarithm of the number of cells instead of using the number of cells directly?&lt;/strong&gt; The reason behind it is slightly complicated. A simple (but not entirely correct argument) is the following: We do so, because the tumor cell counts at later times become extremely large numbers, on the order of several million cells (For example, look at the number of cells in the late stages of the tumor growth, around $t=20$ days). Therefore, to make sure that we don’t hit any numerical precision limits of the computer when dealing with such huge numbers, we work with the logarithm of the number of tumor cells instead of their true non-logarithmic values.&lt;/p&gt;

&lt;p&gt;We have seven data points, so the overall probability of observing all of data $\mathcal{D}$ together (the time vector and the logarithm of the number of cells at different times) given the parameters of the model, $\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$, is the product of their individual probabilities of observations given by the above equation,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
\mathcal{L}(\mathcal{D}|\lambda,c,\sigma) 
&amp;= \prod_{i=1}^{n=8} \pi(\log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
&amp;= \prod_{i=1}^{n=8} \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i)-\log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;Frequently, however, you would want to work with $\log\mathcal{L}$ instead of $\mathcal{L}$. This is again because the numbers involved are extremely small often below the precision limits of the computer. So, by taking the logarithm of the numbers, we work instead with the number’s exponent, which looks just like a normal number (not so big, not so small). So, by taking the log, the above equation becomes,&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align*}
    \log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)
    &amp;= \sum_{i=1}^{n=8} \log \pi( \log N_{obs}(t_i) | \log N(t_i,\lambda,c),\sigma) \\\\
    &amp;= \sum_{i=1}^{n=8} \log \bigg[ \frac{1}{\sigma\sqrt{2\pi}} \exp\bigg( - \frac{ \big[ \log N_{obs}(t_i) - \log N(t_i,\lambda,c) \big]^2}{2\sigma^2} \bigg) \bigg] ~.
\end{align*} %]]&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5. &lt;/strong&gt;
Now the goal is to use an optimization algorithm in Python, such as &lt;code&gt;fminsearch()&lt;/code&gt;, to find the most likely set of the parameters of the model $\lambda,c,\sigma$ that give the highest likelihood of obtaining the available data, which is given by the number $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ from the above equation. So we want to find the set of parameters for which this number given by the above equation is maximized. You can also use any Python optimization function or method that you wish, to obtain the best parameters.&lt;/p&gt;

&lt;p&gt;However, if you use &lt;code&gt;fminsearch()&lt;/code&gt;, then note that this function finds the minimum of an input function, not the maximum. What we want is to find the maximum of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.
What is the solution then? Very simple.
We can multiply the value of $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$ by a negative sign so that the maximum value is converted to a minimum. But, note that the position (the set of parameter values) at which this minimum occurs, will remain the same as the maximum position for $\log\mathcal{L}(\mathcal{D}|\lambda,c,\sigma)$.&lt;/p&gt;

&lt;p&gt;So, now rewrite your likelihood function above by multiplying its final result (which is just number) by a negative sign. Then you pass this modified function to &lt;code&gt;fminsearch()&lt;/code&gt; and you find the optimal parameters. Note that &lt;code&gt;fminsearch()&lt;/code&gt; takes as input also a set of initial staring parameter values to initiate the search for the optimal parameters. You can use $(\lambda,c,\sigma) = [10,0.1,1]$ as your starting point given to &lt;code&gt;fminsearch()&lt;/code&gt; to search for the optimal values of the parameters.&lt;/p&gt;

&lt;p&gt;Then redraw the above tumor evolution curve and show the result from the model prediction as well, like the following,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/1-problem/figures/growthCurveFit.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Report also your best-fit parameters in a file and submit them with all the figures and your codes to your exam folder repository.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;hierarchical-clustering&quot;&gt;Hierarchical Clustering&lt;/h2&gt;

&lt;p&gt;Consider the set of (x,y) coordinates of 1000 points in this file: &lt;a href=&quot;http:/DSP2019F/exam/2-problem/points.txt&quot; target=&quot;_blank&quot;&gt;points.txt&lt;/a&gt;. Plotting these points would yield a scatter plot like the black points in the following plot,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/2-problem/scatterPlot.png&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The red points on this plot delineate the borders of the three ellipses from which these points have been drawn. Suppose, we did not a priori what these ellipses were, and we wanted to &lt;strong&gt;guess them&lt;/strong&gt; to the best of our knowledge using Machine Learning methods, in particular, clustering techniques. However, the problem here is slightly complex: We don’t know a priori how many clusters may exist in our data set. Many clustering techniques have been developed over the past decades to automatically answer the question of how many clusters exist in a dataset and where and which objects belong to what clusters.&lt;/p&gt;

&lt;p&gt;Here, we want to focus on a very special approach. To guess the original ellipses from which these points were drawn, we can start with a very simple assumption: suppose all points came from one single ellipse. We can build this hypothetical ellipse by constructing the covariance matrix of the set of points in the dataset and then scale it properly such that the ellipse covers all the points in our dataset.&lt;/p&gt;

&lt;p&gt;But here is the second question: Does this single ellipse accurately describe the original ellipse(s) from which the points were drawn? One way to ensure this is the case is to check and see if the points are uniformly distributed inside our single ellipse. But this turns out to be a very challenging task.&lt;/p&gt;

&lt;p&gt;An easier way to see if the single ellipse is a good fit to our points is to compute the area of the single ellipse, then move on to assume that our data came from &lt;strong&gt;two ellipses&lt;/strong&gt; instead of a single ellipse. At this point, we can use the K-means clustering method to find the two clusters from which these points could have been drawn.&lt;/p&gt;

&lt;p&gt;Now, here is the critical step: We compute the sum of the areas enclosed by these two ellipses (which could overlap, but that is fine, we behave as if they were not overlapping). Then we can compare this sum with the area of the original single ellipse. If the area of the single ellipse is smaller than the sum of the areas of the two child-ellipses, we assume that all of the points in our dataset came from the single ellipse, and stop further searches for potentially more clusters in our dataset.&lt;/p&gt;

&lt;p&gt;However, if the area of the single ellipse is larger than the sum of the areas of the two child ellipses, then we know that the two smaller ellipses are likely better fit to our dataset than a single ellipse. Therefore, our dataset was likely generated from two-ellipses.&lt;/p&gt;

&lt;p&gt;But what if there are more than two ellipses responsible for the generation of the points? One way to test this hypothesis is to repeat the above procedure for the two child-ellipses and see whether any one of them can be replaced with two sub-child ellipses instead. This procedure can be then repeated for as many times as needed, until the algorithm stops, implying that all of the child ellipses have been found.&lt;/p&gt;

&lt;p&gt;Write an algorithm based on the above description that can classify all points in a given dataset into an automatically-determined number of ellipses, such that each point in the dataset is enclosed by at least one ellipse. The above graph shows an example of a set of such ellipses illustrated by the green dots. Note that these ellipses are not unique, meaning that different runs of the algorithm could potentially yield different sets of best-fit ellipses. However, we can hope that each set of such ellipses found by the algorithm is a good approximation to the original ellipses from which the points were drawn.&lt;/p&gt;

&lt;p&gt;Here is an animation of this algorithm at work, for a set of points with an evolving overall-shape over time,&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/exam/2-problem/ellipses_forever.gif&quot; width=&quot;900&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/exam/1-semester-project&quot;&gt;Final exam: semester project&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on November 01, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 3: More on Python programming, Monte Carlo methods, and regression]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/homework/3-more-on-python-programming-data-science"/>
  <id>http:/DSP2019F/homework/3-more-on-python-programming-data-science</id>
  <published>2019-10-31T00:00:00-05:00</published>
  <updated>2019-10-31T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Thursday Nov 21, 2019 2:00 PM&lt;/strong&gt;. This homework aims at giving you some extra experience with the syntax of Python and programming via Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/one-line-check-even-number/one-line-check-even-number&quot; target=&quot;_blank&quot;&gt;Check if number is even in one line function definition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/finding-maximum-value-via-recursive-function/finding-maximum-value-via-recursive-function&quot; target=&quot;_blank&quot;&gt;Finding the maximum value of an array via recursive function calls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/finding-maximum-location-via-recursive-function/finding-maximum-location-via-recursive-function&quot; target=&quot;_blank&quot;&gt;Finding the position of the maximum value of an array via recursive function calls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-approximation-of-pi/monte-carlo-approximation-of-pi&quot; target=&quot;_blank&quot;&gt;Monte Carlo approximation of the number Pi&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/random-walk-central-limit-theorem/random-walk-central-limit-theorem&quot; target=&quot;_blank&quot;&gt;Understanding the Central Limit Theorem via random walk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/monte-carlo-sampling-of-distribution-functions/monte-carlo-sampling-of-distribution-functions&quot; target=&quot;_blank&quot;&gt;Monte Carlo sampling of distribution functions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/simulating-monty-hall-game/simulating-monty-hall-game&quot; target=&quot;_blank&quot;&gt;Simulating the Monty Hall game&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-standard-normal-distribution/regression-standard-normal-distribution&quot; target=&quot;_blank&quot;&gt;Regression: obtaining the most likely mean and standard deviation of a set of Standard Normally Distributed Random Variables&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/regression-predicting-future-global-land-temperature/regression-predicting-future-global-land-temperature&quot; target=&quot;_blank&quot;&gt;Regression: Predicting the global land temperature of the Earth in 2050 from the past data&lt;/a&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/homework/3-more-on-python-programming-data-science&quot;&gt;Homework 3: More on Python programming, Monte Carlo methods, and regression&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on October 31, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 2: Python control constructs and program units]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/quiz/2-control-constructs-and-program-units"/>
  <id>http:/DSP2019F/quiz/2-control-constructs-and-program-units</id>
  <published>2019-10-21T00:00:00-05:00</published>
  <updated>2019-10-21T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;This quiz aims to testing your basic knowledge of Control constructs and program units in Python.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Suppose you write a Python module, which you would also like to run it as a standalone Python code. If you wanted to make sure that some specific Python statements are executed only when the code is run a Python code (and not a module), you may recall from the lecture, that we had to use and if block like the following,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;if __name__ == &quot;__main__&quot;:
    &amp;lt;Python statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Briefly explain what this if block does and mean.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose you write a module named &lt;code&gt;myModule&lt;/code&gt;, which contains the function &lt;code&gt;myfunc&lt;/code&gt;. Now you import this module to another code.&lt;br /&gt;
(A) Write down the import statement that would enable you to use &lt;code&gt;myfunc&lt;/code&gt; with name &lt;code&gt;f&lt;/code&gt; instead.&lt;br /&gt;
(B) What would be the output of the following Python print statement,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;import myModule as mm
print(mm.__name__)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Suppose there are two lists of numbers,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;even = [0,2,4,6,8]
odd = [1,3,5,7,9]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Write a &lt;strong&gt;one-line&lt;/strong&gt; Python statement (list comprehension) that gives a list &lt;code&gt;summ&lt;/code&gt; whose elements are the sum of the respective elements in the above two lists &lt;code&gt;odd&lt;/code&gt; and &lt;code&gt;even&lt;/code&gt;, that is,&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;summ
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;[1, 5, 9, 13, 17]
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;(Hint: You can use &lt;code&gt;zip&lt;/code&gt; function inside a list comprehension. There is also a more efficient way of achieving the goal, without list comprehension. Any guess?)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Consider the following for-loop,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;mylist = list(range(0,10,2))
for item in mylist:
    mylist.append(item+1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;How many iterations does this for-loop perform before ending? Explain briefly why.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Write a recursive function named &lt;code&gt;getSum&lt;/code&gt; or &lt;code&gt;get_sum&lt;/code&gt; that takes an input integer and gives as the output, the sum of all positive integers up to and including the input integer, for example,
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;getSum(-1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;getSum(0)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;0
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;getSum(1)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;1
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;getSum(2)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;3
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code class=&quot;language-python&quot;&gt;getSum(3)
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt;6
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/quiz/2-control-constructs-and-program-units&quot;&gt;Quiz 2: Python control constructs and program units&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on October 21, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 2: Python programming]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/homework/2-python-programming"/>
  <id>http:/DSP2019F/homework/2-python-programming</id>
  <published>2019-10-01T00:00:00-05:00</published>
  <updated>2019-10-01T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Thursday Oct 17, 2019 2:00 PM&lt;/strong&gt;. This homework aims at giving you some experience with the syntax of Python and programming via Python.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-call-script-from-bash/python-call-script-from-bash&quot; target=&quot;_blank&quot;&gt;Python script call from the Bash command line&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/python-variable-aliasing-copying/python-variable-aliasing-copying&quot; target=&quot;_blank&quot;&gt;Python aliasing vs. copying variables&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/implementing-gaussian-function/implementing-gaussian-function&quot; target=&quot;_blank&quot;&gt;Implementing the Bell-shaped (Gaussian) function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/branching-pythonic-way/branching-pythonic-way&quot; target=&quot;_blank&quot;&gt;Branching, the Pythonic way&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;5.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/fibonacci-sequence-via-recursive-function-calls/fibonacci-sequence-via-recursive-function-calls&quot; target=&quot;_blank&quot;&gt;Computing the Fibonacci sequence via recursive function calls&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;6.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/fibonacci-sequence-via-for-loop/fibonacci-sequence-via-for-loop#python&quot; target=&quot;_blank&quot;&gt;Computing the Fibonacci sequence via for-loop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/isprime-recursive/isprime-recursive&quot; target=&quot;_blank&quot;&gt;Checking if an input is a prime number (via recursive function calls)?&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;8.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/largest-prime-number-smaller-than-input/largest-prime-number-smaller-than-input&quot; target=&quot;_blank&quot;&gt;Getting the largest prime number smaller than the input value&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;9.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/triangle-area/triangle-area&quot; target=&quot;_blank&quot;&gt;Computing the area of a triangle&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;10.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/while-loop-to-for-loop/while-loop-to-for-loop&quot; target=&quot;_blank&quot;&gt;The while-loop implementation of for-loop&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;11.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-arguments-summation/command-line-input-arguments-summation&quot; target=&quot;_blank&quot;&gt;Command line input arguments summation via sum()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;12.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/command-line-input-arguments-eval/command-line-input-arguments-eval&quot; target=&quot;_blank&quot;&gt;Command line input arguments summation via eval()&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;13.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/precision-error-paradox/precision-error-paradox&quot; target=&quot;_blank&quot;&gt;Impact of machine precision on numerical computation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;14.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/integer-overflow/integer-overflow&quot; target=&quot;_blank&quot;&gt;Integer overflow&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;15.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/modifying-loop-index-value/modifying-loop-index-value&quot; target=&quot;_blank&quot;&gt;Modifying the index of a for-loop&lt;/a&gt;.&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/homework/2-python-programming&quot;&gt;Homework 2: Python programming&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on October 01, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Quiz 1: Version control system, programming history]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/quiz/1-version-control-system-programming-history"/>
  <id>http:/DSP2019F/quiz/1-version-control-system-programming-history</id>
  <published>2019-09-12T00:00:00-05:00</published>
  <updated>2019-09-12T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;!--
This is the solution to [Quiz 1: Problems - Version control system](1-problems-version-control-system.html){:target=&quot;_blank&quot;}.  

The following figure illustrates the grade distribution for this quiz.  
&lt;figure&gt;
    &lt;img src=&quot;http:/DSP2019F/quiz/gradeDist/gradeHistQuiz1.png&quot; width=&quot;700&quot;&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;
        Maximum possible points is 1.
    &lt;/figcaption&gt;
&lt;/figure&gt;
--&gt;

&lt;p&gt;This quiz aims at testing your basic knowledge of Version Control System and the history of programming. Don’t forget to push your answers to your remote repository by the end of quiz time. Push all your answers to &lt;strong&gt;quiz/1/&lt;/strong&gt; folder in your Github project.&lt;/p&gt;

&lt;hr /&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands can add all the &lt;strong&gt;new&lt;/strong&gt; and &lt;strong&gt;modified-existing&lt;/strong&gt; files to the staging area? choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git add -A&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git add --A&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git add -all&lt;/code&gt;&lt;br /&gt;
 (D) &lt;code&gt;git add --all&lt;/code&gt;&lt;br /&gt;
 (E) &lt;code&gt;git add -u&lt;/code&gt;&lt;br /&gt;
 (F) &lt;code&gt;git add .&lt;/code&gt;&lt;br /&gt;
 (G) &lt;code&gt;git add .; git add -u&lt;/code&gt;&lt;br /&gt;
 (H) &lt;code&gt;git add .; git add --u&lt;/code&gt;&lt;br /&gt;
 (I) &lt;code&gt;git add -u; git add .&lt;/code&gt;&lt;br /&gt;
 (J) &lt;code&gt;git add --u; git add .&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: A, D, G, F, I&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Which of the following Git commands &lt;strong&gt;both&lt;/strong&gt; stages and commits &lt;strong&gt;only modified and deleted files&lt;/strong&gt; but &lt;strong&gt;NOT&lt;/strong&gt; the &lt;em&gt;new files&lt;/em&gt; added to the repository since the last commit. Choose all that apply.&lt;br /&gt;
 &lt;br /&gt;
 (A) &lt;code&gt;git commit&lt;/code&gt;&lt;br /&gt;
 (B) &lt;code&gt;git commit -a&lt;/code&gt;&lt;br /&gt;
 (C) &lt;code&gt;git commit -am&lt;/code&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer: B, C&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Write down the Git command that lists all Git commands for you.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt; $ git help -a
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) What is the closest programming language to machine code (i.e., binary code)?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Does it need interpretation in order to become machine-comprehensible?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Yes. An &lt;em&gt;Assembler&lt;/em&gt; interprets the program for the machine.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name the oldest high-level programming language that is still in active daily use.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran&lt;/p&gt;

    &lt;p&gt;(B) Approximately how many decades is it old? ($\pm15$ years is acceptable answer. the decade it was created is also an acceptable answer)&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
in 1950s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;(A) Name a second-generation programming language.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Assembly&lt;/p&gt;

    &lt;p&gt;(B) Which language-generation are Fortran, C, C++, MATLAB, Python, R?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
third, third, third, fourth, fourth, fourth&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In what decades C, C++, and MATLAB/Python were created, respectively?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
1970s, 1980s, 1980s, 1990s&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name an ancestor programming language of C.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
B&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of C++.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
C, Simula&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Name a programming language ancestor of MATLAB and a programming language ancestor of Python.&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
Fortran/C&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;How would you distinguish exponential behavior vs. power-law behavior (function) in a 2-dimensional plot?&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt;&lt;br /&gt;
An exponential curve looks like a line only when the X-axis is plotted on log-scale.&lt;br /&gt;
A power-law curve looks like a line only when both the X- and Y- axes are plotted on log-scale.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/quiz/1-version-control-system-programming-history&quot;&gt;Quiz 1: Version control system, programming history&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on September 12, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Homework 1: Version Control Using Git and Github]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/homework/1-version-control-using-git-github"/>
  <id>http:/DSP2019F/homework/1-version-control-using-git-github</id>
  <published>2019-09-04T00:00:00-05:00</published>
  <updated>2019-09-04T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;♣ &lt;strong&gt;Due Date: Wednesday Sep 12, 2019 2:00 PM&lt;/strong&gt;. This homework aims at giving you some experience on how to create Git branches, develop your project on multiple branches, merge them, resolve potential conflicts between different branches upon merging, and finally how to delete them. It also gives you some experience with using other commonly-used Git commands.&lt;/p&gt;

&lt;p&gt;First, use the following Markdown language references, or any other reference that you find or prefer, to design a Github-interpretable README file for each of folders in your project for this course, and a Github web-page for your project.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http:/DSP2019F/lecture/1/markdown-cheatsheet-online.pdf&quot; target=&quot;_blank&quot;&gt;Markdown language cheat-sheet (pdf)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ghost.org/markdown/&quot; target=&quot;_blank&quot;&gt;Markdown language reference (web)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot; target=&quot;_blank&quot;&gt;Adam Pritchard’s Markdown cheat-sheet (web)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Write your code sections of your answer in Markdown syntax.
For example,&lt;br /&gt;
&lt;code&gt;
    ```bash  &lt;br /&gt;
    $ git branch -d test  &lt;br /&gt;
    error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'  &lt;br /&gt;
    ```
&lt;/code&gt;
&lt;br /&gt;
will display the following text highlighted as &lt;em&gt;bash&lt;/em&gt; code, in your &lt;em&gt;readme.md&lt;/em&gt; file (albeit, with different style and color).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$ git branch -d test
error: Cannot delete branch 'test' checked out at 'C:/Users/Amir/git/foo'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; &lt;a href=&quot;https://www.cdslab.org/recipes/programming/version-control-using-git-github/version-control-using-git-github&quot; target=&quot;_blank&quot;&gt;Version-control using Git and GitHub&lt;/a&gt;.&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/homework/1-version-control-using-git-github&quot;&gt;Homework 1: Version Control Using Git and Github&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on September 04, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 1: Assessing your programming knowledge and interests]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/announcement/1-assessing-your-knowledge-and-interests"/>
  <id>http:/DSP2019F/announcement/1-assessing-your-knowledge-and-interests</id>
  <published>2019-08-22T00:00:00-05:00</published>
  <updated>2019-08-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;The goal of this survey is to assess your prior programming experience and to identify the favorite programming language and Data Science topics for this class, as well as the language and topics that your advisor deems essential for your research. Ask Amir to send you a link to the survey if you have not already received it.&lt;/p&gt;

&lt;h2 id=&quot;survey-results-as-of-august-22-2019&quot;&gt;Survey results as of August 22, 2019&lt;/h2&gt;

&lt;p&gt;The following are the summaries of the responses to the survey questions. The total number of survey respondents is 10. It appears that at least half of the class, knows at least one programming language at some elementary level. Also it appears that almost everyone in this class prefers Python to other choices for programming.&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q1.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q2.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q3.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q4.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q5.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q6.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
            &lt;img src=&quot;http:/DSP2019F/announcement/initial-survey/Q7.png&quot; width=&quot;100%&quot; /&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/announcement/1-assessing-your-knowledge-and-interests&quot;&gt;Announcement 1: Assessing your programming knowledge and interests&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on August 22, 2019.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Announcement 0: Student-professor connection day]]></title>
  <link rel="alternate" type="text/html" href="http:/DSP2019F/announcement/0-student-professor-connection-day"/>
  <id>http:/DSP2019F/announcement/0-student-professor-connection-day</id>
  <published>2019-08-22T00:00:00-05:00</published>
  <updated>2019-08-22T00:00:00-05:00</updated>
  <author>
    <name>Amir Shahmoradi</name>
    <uri>http:/DSP2019F</uri>
    <email>shahmoradi@utexas.edu</email>
  </author>
  
  <content type="html">
  
    &lt;p&gt;On the first day of our class, we will try to get to know each other and I will attempt to describe my research work and educational background for you, as well as what we should expect from this course. Then I will present the results of the survey that I sent out to you a week ago to assess your programming knowledge, your favorite programming language, and the programming language that you would need for your research. Based on the survey results and your feedback in class, we will decide on the choice of language and the design of this course.&lt;/p&gt;

&lt;div class=&quot;post_toc&quot;&gt;&lt;/div&gt;

&lt;h2 id=&quot;about-me-amir-the-instructor&quot;&gt;About me, Amir, the instructor&lt;/h2&gt;

&lt;p&gt;I am a physicist and researcher, and currently a faculty member at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/physics/&quot;&gt;the Department of Physics&lt;/a&gt; as well as the Data Science Program in &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/science/index.php&quot;&gt;The College of Science&lt;/a&gt; at &lt;a target=&quot;_blank&quot; href=&quot;https://www.uta.edu/&quot;&gt;The University of Texas at Arlington&lt;/a&gt;. You can find more information about me, our group, and our research at &lt;a target=&quot;_blank&quot; href=&quot;https://www.cdslab.org&quot;&gt;cdslab.org&lt;/a&gt;. Here is a summary of my life in a few pictures:&lt;/p&gt;

&lt;p&gt;I was introduced to the world of information and computer programming around 1991 by my father and elder brother. By the end of elementary school, I was so impressed with and knew enough about computer software to write a few simple &lt;a target=&quot;_blank&quot; href=&quot; https://en.wikipedia.org/wiki/PC_game&quot;&gt;computer games&lt;/a&gt; in &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/QBasic&quot;&gt;QBasic programming language&lt;/a&gt; on our first family personal computer, &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/IBM_386SLC&quot;&gt;IBM 386&lt;/a&gt;. Here is an example of how computer games looked liked 30 years ago.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
        &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/4TSF5sIgorA&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
		&lt;!-- &lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt; --&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/memoriesOfGreen.jpg&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/memoriesOfGreen.jpg&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
            &lt;figcaption&gt;A portrait of me at high-school by my friends&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/EinsteinSandals.jpg&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/EinsteinSandals.jpg&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
            &lt;figcaption&gt;What I imagined I'd do as a physicist&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/PhDdefense.gif&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/PhDdefense.gif&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
            &lt;figcaption&gt;A scene from my Ph.D. defense&lt;/figcaption&gt;
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;I never imagined a day I would use computer programming for scientific purposes. Nevertheless, there has been almost no single day that I have not used scientific programming for my work and research, ever since I entered graduate school.&lt;/p&gt;

&lt;h2 id=&quot;my-research-topics&quot;&gt;My research topics&lt;/h2&gt;

&lt;p&gt;The following are a few examples of what I do nowadays as part of my scientific research at UT Austin.&lt;/p&gt;

&lt;h3 id=&quot;theoretical-astrophysics&quot;&gt;Theoretical Astrophysics&lt;/h3&gt;

&lt;p&gt;While my current focus of research is mathematical modelling of tumor growth and Monte Carlo samplers, I am and have been working in multiple branches of science and engineering for several years, from the subatomic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Elementary_particle&quot;&gt;elementary particles&lt;/a&gt;, to the microscopic world of &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Macromolecule&quot;&gt;biological macromolecules&lt;/a&gt;, to &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Gamma-ray_burst&quot;&gt;astrophysical phenomena&lt;/a&gt; occurring on the grandest scales of the &lt;a target=&quot;_blank&quot; href=&quot;https://en.wikipedia.org/wiki/Observable_universe&quot;&gt;observable Universe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For several years of my research, I have been working on understanding Gamma-Ray Bursts (GRB) and their physics. Below is a movie of the moment a Short-duration GRB is generated from the merger of a binary Neutron star system.&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/P2ESs1rPO_A?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/astro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;theoretical-biology-bioinformatics&quot;&gt;Theoretical Biology, Bioinformatics&lt;/h3&gt;

&lt;p&gt;I have also worked for a few years in the field of bioinformatics and evolutionary biology. The overarching goal in the field of protein bioinformatics and biophysics is to understand how proteins fold into their unique structure, and what determines the stability of the protein &lt;abbr title=&quot;3-Dimensional&quot;&gt;3D&lt;/abbr&gt; structure.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/bio_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/bio_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;One of the workhorses of this field, is therefore &lt;a href=&quot;https://en.wikipedia.org/wiki/Molecular_dynamics&quot; target=&quot;_blank&quot;&gt;molecular dynamic simulation&lt;/a&gt; to probe the dynamics of proteins and their interactions with other molecules. The following is a 1.5ns molecular dynamics simulation of Human Influenza H1 Hemagglutinin protein (&lt;a href=&quot;https://www.rcsb.org/pdb/explore.do?structureId=1rd8&quot; target=&quot;_blank&quot;&gt;1RD8&lt;/a&gt;, chains AB).&lt;/p&gt;

&lt;div class=&quot;center&quot;&gt;
&lt;div class=&quot;video-wrapper&quot;&gt;
	&lt;div class=&quot;video-container&quot;&gt;
		&lt;iframe width=&quot;853&quot; height=&quot;480&quot; src=&quot;https://www.youtube.com/embed/0XL8RNxzrdw?rel=0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;petroleum-engineering&quot;&gt;Petroleum Engineering&lt;/h3&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/petro_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;computational-oncology&quot;&gt;Computational Oncology&lt;/h3&gt;

&lt;p&gt;What you see in the figures below, is a representation of the growth of Glioblastoma tumor cells in a Rat’s brain over time.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/onco_1.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/onco_2.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/onco_3.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;the-temporal-evolution-of-the-growth-of-glioma-tumor-in-rat&quot;&gt;The temporal evolution of the growth of Glioma tumor in rat&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_1_t10.0.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GBGlastLong.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!--

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_2_t12.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_3_t14.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_5_t16.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_6_t18.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

---  
&lt;br&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/tvccZSliceSubplotWithXYlabWithTB_rad_00gy_7_t20.0.png&quot; width=&quot;100%&quot;&gt;
&lt;/figure&gt;&lt;br&gt;

--&gt;

&lt;h3 id=&quot;monte-carlo-simulation-and-integration-methods&quot;&gt;Monte Carlo Simulation and Integration Methods&lt;/h3&gt;

&lt;p&gt;One of the fields on which my research is currently focused, is developing Monte Carlo optimizer/sampler and integrator algorithms for Bayesian inverse problems.&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-sampling-algorithms&quot;&gt;Development of Monte Carlo sampling algorithms&lt;/h4&gt;

&lt;p&gt;Below you see example animations of two &lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain_Monte_Carlo&quot; target=&quot;_blank&quot;&gt;Markov Chain Monte Carlo&lt;/a&gt; (MCMC) samplers, both of which sample a double Gaussian-peak function, but with different MCMC sampling parameters.&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/PDF_RS_H_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of highly-efficiency, but bad-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/PDF_RS_L_Forever20ms.gif&quot; width=&quot;100%&quot; /&gt;
    &lt;figcaption style=&quot;text-align:center&quot;&gt;Example of low-efficiency, but good-mixing MCMC sampler.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;development-of-monte-carlo-integration-algorithms&quot;&gt;Development of Monte Carlo integration algorithms&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/DRI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/DLI.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GR3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GR2D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/GR2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/EB3D.png&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;figure&gt;
	&lt;img src=&quot;https://cdslaborg.github.io/connection/EB2D.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;biomedical-data-science&quot;&gt;Biomedical Data Science&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016.png&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016.png&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;!-- include.path must be given relative to site.url, which is the project's root directory --&gt;

&lt;div style=&quot;display:block;text-align:center;margin-right:auto;margin-left:auto&quot;&gt;
    &lt;figure&gt;
        
        &lt;a href=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016_overlay.png&quot; target=&quot;_blank&quot;&gt;
        
            &lt;img src=&quot;https://cdslaborg.github.io/connection/PT509_ST9501_SE00144_ADC0016_overlay.png&quot; width=&quot;100%&quot; /&gt;
        
        &lt;/a&gt;
        
        
    &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;


  
  &lt;p&gt;&lt;a href=&quot;http:/DSP2019F/announcement/0-student-professor-connection-day&quot;&gt;Announcement 0: Student-professor connection day&lt;/a&gt; was originally published by Amir Shahmoradi at &lt;a href=&quot;http:/DSP2019F&quot;&gt;PHYS 5391 - Fall 2019 - TTH 14:00-13:30 - Life Sciences Building LS 428&lt;/a&gt; on August 22, 2019.&lt;/p&gt;</content>
</entry>

</feed>
